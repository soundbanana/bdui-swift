// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public struct bdui_Button: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_12_23() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case text = 4
    case action = 6
    case titleColor = 8
    case backgroundColor = 10
    case image = 12
    case imageEdgeInsets = 14
    case contentEdgeInsets = 16
    case isEnabled = 18
    case isSelected = 20
    case isHighlighted = 22
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var text: String? { let o = _accessor.offset(VTOFFSET.text.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var textSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.text.v) }
  public var action: String? { let o = _accessor.offset(VTOFFSET.action.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.action.v) }
  public var titleColor: bdui_Color? { let o = _accessor.offset(VTOFFSET.titleColor.v); return o == 0 ? nil : bdui_Color(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var backgroundColor: bdui_Color? { let o = _accessor.offset(VTOFFSET.backgroundColor.v); return o == 0 ? nil : bdui_Color(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var image: String? { let o = _accessor.offset(VTOFFSET.image.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var imageSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.image.v) }
  public var hasImageEdgeInsets: Bool { let o = _accessor.offset(VTOFFSET.imageEdgeInsets.v); return o == 0 ? false : true }
  public var imageEdgeInsetsCount: Int32 { let o = _accessor.offset(VTOFFSET.imageEdgeInsets.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func imageEdgeInsets(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.imageEdgeInsets.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var imageEdgeInsets: [Float32] { return _accessor.getVector(at: VTOFFSET.imageEdgeInsets.v) ?? [] }
  public var hasContentEdgeInsets: Bool { let o = _accessor.offset(VTOFFSET.contentEdgeInsets.v); return o == 0 ? false : true }
  public var contentEdgeInsetsCount: Int32 { let o = _accessor.offset(VTOFFSET.contentEdgeInsets.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func contentEdgeInsets(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.contentEdgeInsets.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var contentEdgeInsets: [Float32] { return _accessor.getVector(at: VTOFFSET.contentEdgeInsets.v) ?? [] }
  public var isEnabled: Bool { let o = _accessor.offset(VTOFFSET.isEnabled.v); return o == 0 ? true : _accessor.readBuffer(of: Bool.self, at: o) }
  public var isSelected: Bool { let o = _accessor.offset(VTOFFSET.isSelected.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public var isHighlighted: Bool { let o = _accessor.offset(VTOFFSET.isHighlighted.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public static func startButton(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 10) }
  public static func add(text: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: text, at: VTOFFSET.text.p) }
  public static func add(action: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: action, at: VTOFFSET.action.p) }
  public static func add(titleColor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: titleColor, at: VTOFFSET.titleColor.p) }
  public static func add(backgroundColor: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: backgroundColor, at: VTOFFSET.backgroundColor.p) }
  public static func add(image: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: image, at: VTOFFSET.image.p) }
  public static func addVectorOf(imageEdgeInsets: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: imageEdgeInsets, at: VTOFFSET.imageEdgeInsets.p) }
  public static func addVectorOf(contentEdgeInsets: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: contentEdgeInsets, at: VTOFFSET.contentEdgeInsets.p) }
  public static func add(isEnabled: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: isEnabled, def: true,
   at: VTOFFSET.isEnabled.p) }
  public static func add(isSelected: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: isSelected, def: false,
   at: VTOFFSET.isSelected.p) }
  public static func add(isHighlighted: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: isHighlighted, def: false,
   at: VTOFFSET.isHighlighted.p) }
  public static func endButton(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createButton(
    _ fbb: inout FlatBufferBuilder,
    textOffset text: Offset = Offset(),
    actionOffset action: Offset = Offset(),
    titleColorOffset titleColor: Offset = Offset(),
    backgroundColorOffset backgroundColor: Offset = Offset(),
    imageOffset image: Offset = Offset(),
    imageEdgeInsetsVectorOffset imageEdgeInsets: Offset = Offset(),
    contentEdgeInsetsVectorOffset contentEdgeInsets: Offset = Offset(),
    isEnabled: Bool = true,
    isSelected: Bool = false,
    isHighlighted: Bool = false
  ) -> Offset {
    let __start = bdui_Button.startButton(&fbb)
    bdui_Button.add(text: text, &fbb)
    bdui_Button.add(action: action, &fbb)
    bdui_Button.add(titleColor: titleColor, &fbb)
    bdui_Button.add(backgroundColor: backgroundColor, &fbb)
    bdui_Button.add(image: image, &fbb)
    bdui_Button.addVectorOf(imageEdgeInsets: imageEdgeInsets, &fbb)
    bdui_Button.addVectorOf(contentEdgeInsets: contentEdgeInsets, &fbb)
    bdui_Button.add(isEnabled: isEnabled, &fbb)
    bdui_Button.add(isSelected: isSelected, &fbb)
    bdui_Button.add(isHighlighted: isHighlighted, &fbb)
    return bdui_Button.endButton(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.text.p, fieldName: "text", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.action.p, fieldName: "action", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.titleColor.p, fieldName: "titleColor", required: false, type: ForwardOffset<bdui_Color>.self)
    try _v.visit(field: VTOFFSET.backgroundColor.p, fieldName: "backgroundColor", required: false, type: ForwardOffset<bdui_Color>.self)
    try _v.visit(field: VTOFFSET.image.p, fieldName: "image", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.imageEdgeInsets.p, fieldName: "imageEdgeInsets", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.contentEdgeInsets.p, fieldName: "contentEdgeInsets", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.isEnabled.p, fieldName: "isEnabled", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.isSelected.p, fieldName: "isSelected", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.isHighlighted.p, fieldName: "isHighlighted", required: false, type: Bool.self)
    _v.finish()
  }
}

public struct bdui_Color: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_12_23() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case r = 4
    case g = 6
    case b = 8
    case a = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var r: Float32 { let o = _accessor.offset(VTOFFSET.r.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var g: Float32 { let o = _accessor.offset(VTOFFSET.g.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var b: Float32 { let o = _accessor.offset(VTOFFSET.b.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var a: Float32 { let o = _accessor.offset(VTOFFSET.a.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public static func startColor(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(r: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: r, def: 0.0, at: VTOFFSET.r.p) }
  public static func add(g: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: g, def: 0.0, at: VTOFFSET.g.p) }
  public static func add(b: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: b, def: 0.0, at: VTOFFSET.b.p) }
  public static func add(a: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: a, def: 0.0, at: VTOFFSET.a.p) }
  public static func endColor(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createColor(
    _ fbb: inout FlatBufferBuilder,
    r: Float32 = 0.0,
    g: Float32 = 0.0,
    b: Float32 = 0.0,
    a: Float32 = 0.0
  ) -> Offset {
    let __start = bdui_Color.startColor(&fbb)
    bdui_Color.add(r: r, &fbb)
    bdui_Color.add(g: g, &fbb)
    bdui_Color.add(b: b, &fbb)
    bdui_Color.add(a: a, &fbb)
    return bdui_Color.endColor(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.r.p, fieldName: "r", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.g.p, fieldName: "g", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.b.p, fieldName: "b", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.a.p, fieldName: "a", required: false, type: Float32.self)
    _v.finish()
  }
}


// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public struct bdui_TestButton: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_12_23() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case text = 4
    case action = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var text: String? { let o = _accessor.offset(VTOFFSET.text.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var textSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.text.v) }
  public var action: String? { let o = _accessor.offset(VTOFFSET.action.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.action.v) }
  public static func startTestButton(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(text: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: text, at: VTOFFSET.text.p) }
  public static func add(action: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: action, at: VTOFFSET.action.p) }
  public static func endTestButton(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createTestButton(
    _ fbb: inout FlatBufferBuilder,
    textOffset text: Offset = Offset(),
    actionOffset action: Offset = Offset()
  ) -> Offset {
    let __start = bdui_TestButton.startTestButton(&fbb)
    bdui_TestButton.add(text: text, &fbb)
    bdui_TestButton.add(action: action, &fbb)
    return bdui_TestButton.endTestButton(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.text.p, fieldName: "text", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.action.p, fieldName: "action", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}


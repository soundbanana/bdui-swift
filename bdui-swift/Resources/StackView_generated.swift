// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum bdui_Axis: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case horizontal = 0
  case vertical = 1

  public static var max: bdui_Axis { return .vertical }
  public static var min: bdui_Axis { return .horizontal }
}


public struct bdui_StackView: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_12_23() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case axis = 4
    case children = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var axis: bdui_Axis { let o = _accessor.offset(VTOFFSET.axis.v); return o == 0 ? .horizontal : bdui_Axis(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .horizontal }
  public var hasChildren: Bool { let o = _accessor.offset(VTOFFSET.children.v); return o == 0 ? false : true }
  public var childrenCount: Int32 { let o = _accessor.offset(VTOFFSET.children.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func children(at index: Int32) -> bdui_TestButton? { let o = _accessor.offset(VTOFFSET.children.v); return o == 0 ? nil : bdui_TestButton(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startStackView(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(axis: bdui_Axis, _ fbb: inout FlatBufferBuilder) { fbb.add(element: axis.rawValue, def: 0, at: VTOFFSET.axis.p) }
  public static func addVectorOf(children: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: children, at: VTOFFSET.children.p) }
  public static func endStackView(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createStackView(
    _ fbb: inout FlatBufferBuilder,
    axis: bdui_Axis = .horizontal,
    childrenVectorOffset children: Offset = Offset()
  ) -> Offset {
    let __start = bdui_StackView.startStackView(&fbb)
    bdui_StackView.add(axis: axis, &fbb)
    bdui_StackView.addVectorOf(children: children, &fbb)
    return bdui_StackView.endStackView(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.axis.p, fieldName: "axis", required: false, type: bdui_Axis.self)
    try _v.visit(field: VTOFFSET.children.p, fieldName: "children", required: false, type: ForwardOffset<Vector<ForwardOffset<bdui_TestButton>, bdui_TestButton>>.self)
    _v.finish()
  }
}

